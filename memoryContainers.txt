
Memory Layout of array
Memory:
+-------+-------+-------+
|   3   |   2   |   1   |
+-------+-------+-------+
0x1000  0x1004  0x1008  (Hypothetical Addresses)

Memory Layout of list
Memory:
+-------+    +-------+    +-------+
|   3   | -> |   2   | -> |   5   |
+-------+    +-------+    +-------+
0x2000       0x5000       0x7000  (Hypothetical Addresses)


Conclusion
✅ std::array<int, 3>::iterator is a pointer, so it can be printed directly.
❌ std::list<int>::iterator is not a pointer, so it cannot be printed directly.
✅ Use &(*it) to print the memory address of elements in any container.



/********************************************************* */

Comparison of Memory Layouts in Standard Containers
Container					Contiguous Memory?		Iterator Type		Notes
std::array<T, N>				✅ Yes					Pointer-like		Fixed-size, stack-allocated.
std::vector<T>				    ✅ Yes					Random Access		Dynamic size, grows in contiguous memory.
std::deque<T>				    ❌ No					Random Access		Uses multiple memory blocks (not fully contiguous).
std::list<T>					❌ No					Bidirectional		Doubly linked list, each element separately allocated.
std::forward_list<T>			❌ No					Forward Iterator	Singly linked list (even less contiguous).
std::set<T>, std::map<K,V>	    ❌ No					Bidirectional		Tree-based, elements scattered in memory.

